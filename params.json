{"name":"ElectronicColoringBook","tagline":"Colorize data file according to repetitive chunks, typical in ECB encrypted","body":"### Welcome to the Electronic Coloring Book project page.\r\nThe name is obviously a wordplay with [Electronic Codebook](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29), the simplest but also the most unsecure chaining mode of operations to be used with a block cipher.\r\n\r\nFrom Wikipedia:\r\n> The disadvantage of this method is that identical plaintext blocks are encrypted into identical ciphertext blocks; thus, it does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic protocols at all.\r\n> A striking example of the degree to which ECB can leave plaintext data patterns in the ciphertext can be seen when ECB mode is used to encrypt a bitmap image which uses large areas of uniform colour. While the colour of each individual pixel is encrypted, the overall image may still be discerned as the pattern of identically coloured pixels in the original remains in the encrypted version.\r\n\r\nThis is typically illustrated with our favorite mascotte:\r\n\r\n![ecb tux](https://upload.wikimedia.org/wikipedia/commons/f/f0/Tux_ecb.jpg)\r\n\r\nYes we can see it despite it's encrypted, but it's neither that obvious nor visually satisfying, for several reasons we'll explain. We can do better! And that's the goal of this little project.\r\n\r\n### Why ECB forensics isn't that easy?\r\n\r\nThose ECB exemplary images are made artificially: the author knows the original file format (width, height, pixel encoding) and typically overwrites the encrypted header with the original one.\r\n\r\nBut when a file is encrypted and you don't know anything about it, it's not that simple.\r\n<br>One example is the 300 points challenge of the _2014 Nuit du Hack CTF Quals_ called _The Another One_. All you get is an encrypted BMP (as you can guess from the file extension). More details on the resolution of that challenge are available [here](http://wiki.yobi.be/wiki/NDH_Writeups#Another_One).\r\nIt appears quickly that there are recurring encrypted blocks but practical problems are to recover the unknown parameters:\r\n* width and height of the image\r\n* pixel encoding. Here it's a BMP but BMP can [encode each pixel](https://en.wikipedia.org/wiki/BMP_file_format#Pixel_format) in 1 bit, 2 bits, 4 bits, 8 bits, 16 bits, 24 bits or 32 bits so that doesn't really help.\r\n* layout. Here it's a BMP so starting from bottom left to top right, line by line.\r\n\r\nPixel encoding, width and height link back to the total file size:\r\n_header + width * height * bytes_per_pixel_\r\n\r\nHere is another example we'll walk through. For the record the binary blob was created from some ppm (as we need a non-compressed bitmap to start with) as:\r\n`openssl enc -e -aes-128-ecb -in test.ppm -out test.bin -k toto`\r\ntest.bin is available [here](/images/test.bin)\r\n\r\nAt first we'll use a square ratio and color each byte.\r\n\r\n![](./images/test.bin.1.png  =400x)\r\n\r\nNothing really recognizable, isn't it?","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
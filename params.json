{"name":"ElectronicColoringBook","tagline":"Colorize data file according to repetitive chunks, typical in ECB encrypted","body":"### Welcome to the Electronic Coloring Book project page.\r\nThe name is obviously a wordplay with [Electronic Codebook](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29), the simplest but also the most insecure chaining mode of operations to be used with a block cipher.\r\n\r\nFrom Wikipedia:\r\n> The disadvantage of this method is that identical plaintext blocks are encrypted into identical ciphertext blocks; thus, it does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic protocols at all.\r\n> A striking example of the degree to which ECB can leave plaintext data patterns in the ciphertext can be seen when ECB mode is used to encrypt a bitmap image which uses large areas of uniform color. While the color of each individual pixel is encrypted, the overall image may still be discerned as the pattern of identically colored pixels in the original remains in the encrypted version.\r\n\r\nThis is typically illustrated with our favorite mascot:\r\n\r\n![ecb tux](https://upload.wikimedia.org/wikipedia/commons/f/f0/Tux_ecb.jpg)\r\n\r\nYes we can see it despite it's encrypted, but it's neither that obvious nor visually satisfying, for several reasons we'll explain. We can do better! And that's the goal of this little project.\r\n\r\n### Why ECB forensics isn't that easy?\r\n\r\nThose ECB exemplary images are made artificially: the author knows the original file format (width, height, pixel encoding) and typically overwrites the encrypted header with the original one.\r\n\r\nBut when a file is encrypted and you don't know anything about it, it's not that simple.\r\n<br>One example is the 300 points challenge of the _2014 Nuit du Hack CTF Quals_ called _The Another One_. All you get is an encrypted BMP (as you can guess from the file extension). More details on the resolution of that challenge are available [here](http://wiki.yobi.be/wiki/NDH_Writeups#Another_One).\r\n\r\nIt appears quickly that there are recurring encrypted blocks but practical problems are to recover the unknown parameters:\r\n* width and height of the image\r\n* pixel encoding. Here it's a BMP but BMP can [encode each pixel](https://en.wikipedia.org/wiki/BMP_file_format#Pixel_format) in 1 bit, 2 bits, 4 bits, 8 bits, 16 bits, 24 bits or 32 bits so that doesn't really help.\r\n* layout. Here it's a BMP so starting from bottom left to top right, line by line.\r\n\r\nPixel encoding, width and height link back to the total encrypted file size:\r\n\r\n_header + width * height * bytes_per_pixel + padding = filesize_\r\n\r\nHere is another example we'll walk through. For the record the binary blob was created from some ppm (as we need a non-compressed bitmap to start with) as:\r\n\r\n`openssl enc -e -aes-128-ecb -in test.ppm -out test.bin -k toto`\r\n\r\ntest.bin is available [here](./images/test.bin)\r\n\r\nAt first we'll use a square ratio and color each byte.\r\n\r\n<img src=\"./images/test.bin.1.png\" alt=\"test.bin.1\" style=\"width: 300px;\"/>\r\n\r\nNothing really recognizable, isn't it?\r\n\r\nFor the record, this image was produced with our tool, asking for a raw rendering and square ratio:\r\n\r\n`ecb-colorize.py test.bin --raw --ratio=1:1`\r\n\r\nBut we'll see our tool can do much better!\r\n\r\n### ElectronicColoringBook.py\r\n\r\nElectronicColoringBook.py is a Python (doh!) script implementing a number of options we'll discover.\r\n\r\nIts goal is to paint over recurring ECB blocks to reveal more easily, and more nicely, the structure of an ECB-encrypted file. It does so by first computing an histogram of recurring blocks, then map it to a color map. It also tries to guess the right ratio with some fast stupid auto-correlation.\r\n\r\nBy default, it assumes:\r\n\r\n* a blocksize of 16 bytes, which is the blocksize of AES\r\n* an unknown ratio, to be guessed\r\n* one byte per pixel\r\n* 16 colors will be used: the most widespread block in white, the next 14 randomly, and all remaining blocks will be [painted in black](https://www.youtube.com/watch?v=u6d8eKvegLI)\r\n\r\nLet's see:\r\n\r\n`ecb-colorize.py test.bin`\r\n\r\n<img src=\"./images/test.bin.2.png\" alt=\"test.bin.2\" style=\"width: 400px;\"/>\r\n\r\nAlready better!\r\n\r\nImage is too wide but, given the pixel width, the ratio was correctly recovered and the lines properly wrapped. So we need to adjust the pixel width to compress horizontally the image:\r\n\r\n`ecb-colorize.py test.bin --pixelwidth=3`\r\n\r\n<img src=\"./images/test.bin.3.png\" alt=\"test.bin.3\" style=\"width: 400px;\"/>\r\n\r\nRemember intermediate colors are picked-up randomly so at each attempt it changes.\r\n\r\nNow that the ratio and pixel width are correct we can observe vertical stripes. That happens when you can't have an exact number of pixels in each block and that's exactly the case here: we guessed each pixel requires 3 bytes and the blocksize is 16 so if pixels of the same color are side by side we get e.g. assuming pixels of color `#AABBCC` three types of block content, each of them encrypted to some gibberish:\r\n\r\n```\r\nAABBCCAABBCCAABBCCAABBCCAABBCCAA -> 81E49040C91E64A8F2EB52EB313EADF4\r\nBBCCAABBCCAABBCCAABBCCAABBCCAABB -> 769B3981E49040C9164A83B6CBFB12BF\r\nCCAABBCCAABBCCAABBCCAABBCCAABBCC -> 12B4502017A19C0EB313EADF47638FB2\r\nAABBCCAABBCCAABBCCAABBCCAABBCCAA -> 81E49040C91E64A8F2EB52EB313EADF4\r\nBBCCAABBCCAABBCCAABBCCAABBCCAABB -> 769B3981E49040C9164A83B6CBFB12BF\r\netc\r\n```\r\n\r\nThe histogram given by our tool shows it clearly too:\r\n```\r\ne64572b589bb19c0eb313eadf4769b39       7528 #FF -> #FF #FF #FF\r\n5302017a4208b19834ebbd6ad542e19f       7497 #53 -> #33 #CC #28\r\n81e49040c91e64a83b46cbfb12bf12b4       7459 #9C -> #28 #60 #CC\r\n21da534df36b7bb28134036d4a1e0b22       1100 #B1 -> #42 #28 #CC\r\nf9d6713a5627d4b5d95416de941d6db8       1083 #99 -> #28 #6B #CC\r\na115eadf3b51b5c245dd4757fcf7c4d5       1014 #E3 -> #CC #28 #94\r\n091dd89d9e3e07423c5ddcb2dfe0c912        577 #CB -> #A6 #28 #CC\r\n851fecda89bdd3a133692d4c0f96a8a5        565 #D8 -> #CC #28 #BF\r\n3f84477b3885b86cf2eb52dc0c762ea7        541 #02 -> #CC #2C #28\r\nb0c826f278b5d27e7cc94373b457df44        226 #80 -> #28 #CC #CC\r\n348b13815efe11c8b1ac83e86fd26d4f        225 #58 -> #28 #CC #31\r\ne616ed83f167a272d3ceb5a3259f1114        205 #83 -> #28 #C0 #CC\r\n184f88d431b6072f991a817d26ee8d2e        116 #7A -> #28 #CC #B4\r\nb52adc1063add22fe924ef3b1f6455f7        109 #FE -> #CC #28 #2C\r\n960cf60f2004894d29bb5bfeb1a743ae        100 #0D -> #CC #57 #28\r\n********************************      17617 #00 -> #00 #00 #00\r\n```\r\nSee the number of occurrences? (2nd column) We can group them by three: 7528&7497&7459, 1100&1083&1014, etc.\r\n\r\nSo let's do it:\r\n\r\n`ecb-colorize.py test.bin -p 3 --group=3`\r\n\r\n<img src=\"./images/test.bin.4.png\" alt=\"test.bin.4\" style=\"width: 400px;\"/>\r\n\r\nStill one more thing: Pluto's tail is wrapped, that's because before the real data there is the image header (here a PPM header) and in this case a salt because of the way we used openssl.\r\nSo we can apply a small offset to skip them. As we're working with blocks it can't be perfect. Here best is to skip two blocks, so 32 bytes:\r\n\r\n`ecb-colorize.py test.bin -p 3 -g 3 --offset=2`\r\n\r\n<img src=\"./images/test.bin.5.png\" alt=\"test.bin.5\" style=\"width: 400px;\"/>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}